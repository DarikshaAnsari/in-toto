[build-system]
requires = ["hatchling>=0.21.1"]
build-backend = "hatchling.build"

[project]
name = "in-toto"
description = "A framework to define and secure the integrity of software supply chains"
readme = "README.md"
license = "Apache-2.0"
requires-python = "~=3.7"
authors = [
    { name = "New York University: Secure Systems Lab", email = "in-toto-dev@googlegroups.com" },
]
keywords = [
    "security",
    "software",
    "supply chain",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Security",
    "Topic :: Software Development",
]
dependencies = [
    "attrs",
    "iso8601",
    "pathspec",
    "python-dateutil",
    "securesystemslib[crypto]>=0.28.0",
]
dynamic = ["version"]

[project.optional-dependencies]
# Install pynacl as optional dependency to use with securesystemslib, as a
# workaround for `"ssl-pynacl": ["securesystemslib[pynacl]>=0.11.3"]`,
# which currently is not supported in "extra_require" (see pypa/pip#4957).
# TODO: Keep track of changes (version, additional requirements) under the
# "pynacl" key in securesystemslib's setup.py.
# https://github.com/secure-systems-lab/securesystemslib/blob/master/setup.py#L101
pynacl = [
    "pynacl>1.2.0",
]

[project.scripts]
in-toto-keygen = "in_toto.in_toto_keygen:main"
in-toto-mock = "in_toto.in_toto_mock:main"
in-toto-record = "in_toto.in_toto_record:main"
in-toto-run = "in_toto.in_toto_run:main"
in-toto-sign = "in_toto.in_toto_sign:main"
in-toto-verify = "in_toto.in_toto_verify:main"
in-toto-match-products = "in_toto.in_toto_match_products:main"

[project.urls]
"Bug Reports" = "https://github.com/in-toto/in-toto/issues"
Homepage = "https://in-toto.io"
Source = "https://github.com/in-toto/in-toto"

[tool.hatch.version]
path = "in_toto/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/in_toto",
    "/tests",
    "/.coveragerc",
    "/tox.ini",
    "/requirements*.txt",
]

[tool.black]
line-length=80

[tool.isort]
profile="black"
line_length=80
known_first_party = ["in_toto"]

# Minimal pylint configuration file for secure systems lab code style guide
# https://github.com/secure-systems-lab/code-style-guidelines. See
# http://pylint.pycqa.org/en/latest/technical_reference/features.html for
# defaults.

# NOTE: Not all default values have been reviewed. If new code breaks the
# linter (for good reasons) consider updating this config file, or disable
# checks via `# pylint: disable=XYZ` in a module or via `--disable` in tox.ini.

[tool.pylint.main]
# no-self-use has been moved to an optional plugin which needs to be explicitly
# loaded.
# https://pylint.pycqa.org/en/latest/whatsnew/2/2.14/summary.html#removed-checkers.
load-plugins="pylint.extensions.no_self_use"

[tool.pylint.basic]
good-names=["e", "fn", "fp"]

[tool.pylint.message_control]
# Disable checks that seem too strict or require too big of a refactor
# TODO: Enable W0703 (broad-except) with in-toto/in-toto#126 and consider
# enabling C0411, C0412, C0413, R0401 (import related checkers) with
# in-toto/in-toto#145.
disable = [
    "fixme",
    "logging-format-interpolation",
    "logging-not-lazy",
    "design",
    "broad-except",
    "wrong-import-order",
    "ungrouped-imports",
    "wrong-import-position",
    "cyclic-import",
    "len-as-condition",
    "literal-comparison",
    "useless-object-inheritance",
    "consider-merging-isinstance",
    "duplicate-code",
    "inconsistent-return-statements",
    "no-self-use",
    "bad-classmethod-argument",
    "super-with-arguments",
    "consider-using-f-string"
]

[tool.pylint.variables]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_|junk"

[tool.pylint.format]
max-module-lines = 2000
